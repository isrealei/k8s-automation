- name: This playbook is for creating ec2 instancesd for master and worker-nodes
  hosts: localhost 
  gather_facts: no
  connection: local
  tasks: 
  - name: import variables
    include_vars: vars/output-vars
  - name: import variable
    include_vars: vpc_setup

  - name: create security group for master node
    ec2_group:
      name: master-sg
      description: security group for master-node
      vpc_id: "{{vpcid}}"
      region: "{{region}}"
      state: "{{state}}"
      purge_rules: no
      tags: 
        Name: Master-sg
      rules:
      - proto: tcp
        ports:
        - 6443
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all on port 6443
    register: master_sg_out


  - name: Update security group to allow traffic within itself
    ec2_group:
      name: master-sg
      description: security group for master-node
      vpc_id: "{{vpcid}}"
      region: "{{region}}"
      state: "{{state}}"
      purge_rules: no
      tags:
        Name: Master-sg
      rules:
      - proto: tcp
        ports:
        - 2379-2380
        group_id: "{{master_sg_out.group_id}}"
      - proto: tcp
        ports:
        - 10250-10257
        group_id: "{{master_sg_out.group_id}}"
    register: master_sg_out


  - name:  Create secuirty for worker-nodes
    ec2_group:
      name: worker-sg
      description: security group for worker-node
      vpc_id: "{{vpcid}}"
      region: "{{region}}"
      state: "{{state}}"
      tags:
        Name: worker-sg
      purge_rules: no
      rules:
      - proto: tcp
        ports:
        - 30000-32767
        cidr_ip: 0.0.0.0/0
        
    register: worker_sg_out

  - name:  Create secuirty for worker-nodes
    ec2_group:
      name: worker-sg
      description: security group for worker-node
      vpc_id: "{{vpcid}}"
      region: "{{region}}"
      state: "{{state}}"
      tags:
        Name: worker-sg
      purge_rules: no
      rules:
      - proto: tcp
        ports:
        - 10250
        group_id: "{{worker_sg_out.group_id}}"

    register: worker_sg_out


  - name: create key pair for all clusternodes
    ec2_key:
      name: cluster_key
      state: present
      region: "{{region}}"
    register: cluster_key_out

  - name: store key into file for ssh
    copy: 
     content: "{{cluster_key_out.key.private_key}}"
     dest: "./cluster_key.pem"
     mode: 0600
    when: cluster_key_out.changed 


  - name: ec2 instance for master-node
    ec2:
      key_name: cluster_key
      instance_type: t2.medium
      image: "{{master_ami}}"
      wait: yes
      region: "{{region}}"
      group_id: "{{master_sg_out.group_id}}"
      exact_count: 1
      wait_timeout: 300
      vpc_subnet_id: "{{pub1id}}"
      assign_public_ip: yes
      instance_tags:
        Name: "Master-node"
        project: cluster
        owner: k8s
      count_tag:
        Name: "Master-node"
        project: cluster
        owner: k8s
    register: master_out


  - name: ec2-instances for workernodes
    ec2:
      key_name: cluster_key
      instance_type: t2.large
      image: "{{master_ami}}"
      wait: yes
      region: "{{region}}"
      exact_count: 1
      wait_timeout: 300
      vpc_subnet_id: "{{pub1id}}"
      assign_public_ip: yes
      instance_tags:
        Name: "worker1"
        project: cluster
        owner: k8s
      count_tag:
        Name: "worker1"
        project: cluster
        owner: k8s
    register: worker_1_out
  


  - name: ec2-instances for workernodes
    ec2:
      key_name: cluster_key
      instance_type: t2.large
      image: "{{master_ami}}"
      wait: yes
      region: "{{region}}"
      group_id: "{{worker_sg_out.group_id}}"
      exact_count: 1
      wait_timeout: 300
      vpc_subnet_id: "{{pub1id}}"
      assign_public_ip: yes
      instance_tags:
        Name: "worker2"
        project: cluster
        owner: k8s
      count_tag:
        Name: "worker2"
        project: cluster
        owner: k8s
    register: worker_2_out



